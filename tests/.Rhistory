result <- httr::GET(url = search_url)
result_httr <- httr::content(result, as = "text")
result_json <- jsonlite::fromJSON(result_httr)
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
runtime <- NA
# loop through each search result from JSON to get necessary details like runtime
imdb_id_details <- NA
for (i in 1:length(result_json$Search$imdbID)){
imdb_id = result_json$Search$imdbID[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
runtime[i] <- imdb_id_details$Runtime
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), runtimes))
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Runtime (in minutes)"
return (output)
}
output = data.frame(title, type, suppressWarnings(as.numeric(year)), runtimes)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), runtimes)
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Runtime (in minutes)"
#' This function returns the runtime of Movies and TV shows based on search word(s) by user.
#'
#' @param search_text search text i.e., word(s) to look for in the Title.
#' @param type expected type of the result can be - movie, series, episode, game
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, and Runtime (in minutes).
#' @export
#'
#' @examples
#' get_runtime('Guardians')
#' get_runtime('Guardians Galaxy', type = 'movie')
get_runtime <- function(search_text, type = ""){
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
type = paste0("type=",type)
apikey <- "apikey=a79b2c95"
search <- gsub(" ", "+", search_text)
# query the API using GET request, and parse the http response as JSON
search_url <- paste0(base_search_url, paste(search, type, apikey, sep = '&'))
result <- httr::GET(url = search_url)
result_httr <- httr::content(result, as = "text")
result_json <- jsonlite::fromJSON(result_httr)
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
runtime <- NA
# loop through each search result from JSON to get necessary details like runtime
imdb_id_details <- NA
for (i in 1:length(result_json$Search$imdbID)){
imdb_id = result_json$Search$imdbID[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
runtime[i] <- imdb_id_details$Runtime
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), runtimes)
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Runtime (in minutes)"
return (output)
}
#' This function returns the attributes of Top 10 most popular movies and TV shows by Genre.
#'
#' @param genre Genre of recommendations can be - action, adventure, comedy, drama, scifi, horror, animation
#'     Default genre is adventure when there is no input from user.
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, Genre, Runtime (in minutes), Actors, Director, Awards, and IMDB Rating.
#' @export
#'
#' @examples
#' get_top10_recommendations()
#' get_top10_recommendations(genre = 'drama')
get_top10_recommendations <- function(genre = 'adventure'){
# Top 10 most popular IMDB titles by genre
action <- c('tt9140560', 'tt2560140', 'tt8179402', 'tt2306299', 'tt2531336', 'tt10332588', 'tt7221388', 'tt8111088', 'tt0944947', 'tt6156584')
adventure <- c('tt2560140', 'tt8179402', 'tt2306299', 'tt10332588', 'tt8111088', 'tt0944947', 'tt9845564', 'tt1831804', 'tt2948372', 'tt0293429')
comedy <- c('tt9140560', 'tt4477976', 'tt10332588', 'tt7221388', 'tt9140342', 'tt8690918', 'tt0386676', 'tt3526078', 'tt2948372', 'tt1586680')
drama <- c('tt9140560', 'tt3661210', 'tt10016180', 'tt2560140', 'tt8740790', 'tt9012876', 'tt8179402', 'tt6857376', 'tt3230854', 'tt2306299')
scifi <- c('tt9140560', 'tt3230854', 'tt8111088', 'tt6156584', 'tt5034838', 'tt8690918', 'tt1831804', 'tt10333426', 'tt6723592', 'tt1190634')
horror <- c('tt2560140', 'tt1831804', 'tt1520211', 'tt0460681', 'tt4574334', 'tt12664876', 'tt1844624', 'tt1405406', 'tt7557108', 'tt8068860')
animation <- c('tt2560140', 'tt2948372', 'tt0458290', 'tt0096697', 'tt5363918', 'tt5109280', 'tt2861424', 'tt0182576', 'tt9335498', 'tt0121955')
# update top10 based on user input of genre
top10 <- NA
if (genre == 'action') {
top10 <- action
} else if ( genre == 'comedy') {
top10 <- comedy
} else if ( genre == 'drama') {
top10 <- drama
} else if ( genre == 'scifi') {
top10 <- scifi
} else if ( genre == 'horror') {
top10 <- horror
} else if ( genre == 'animation'){
top10 <- animation
} else {
top10 <- adventure
}
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
apikey <- "apikey=a79b2c95"
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
genre <- NA
runtime <- NA
actors <- NA
director <- NA
awards <- NA
rating <- NA
# loop through each search result from top10 to get attributes like rating, runtime and awards
imdb_id_details <- NA
for (i in 1:length(top10)){
imdb_id = top10[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
genre[i] <- imdb_id_details$Genre
runtime[i] <- imdb_id_details$Runtime
actors[i] <- imdb_id_details$Actors
director[i] <- imdb_id_details$Director
awards[i] <- imdb_id_details$Awards
rating[i] <- imdb_id_details$imdbRating
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), genre, runtimes, actors, director, awards, suppressWarnings(as.numeric(rating)))
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Genre"
names(output)[5] <- "Runtime (in minutes)"
names(output)[6] <- "Actors"
names(output)[7] <- "Director"
names(output)[8] <- "Awards"
names(output)[9] <- "IMDB Rating"
return (output)
}
#' This function returns the writer of Movies and TV shows based on search word(s) by user.
#'
#' @param search_text search text i.e., word(s) to look for in the Title.
#' @param type expected type of the result can be - movie, series, episode, game
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, and Writer.
#' @export
#'
#' @examples
#' get_writer('Guardians')
#' get_writer('Guardians Galaxy', type = 'movie')
get_writer <- function(search_text, type = ""){
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
type = paste0("type=",type)
apikey <- "apikey=a79b2c95"
search <- gsub(" ", "+", search_text)
# query the API using GET request, and parse the http response as JSON
search_url <- paste0(base_search_url, paste(search, type, apikey, sep = '&'))
result <- httr::GET(url = search_url)
result_httr <- httr::content(result, as = "text")
result_json <- jsonlite::fromJSON(result_httr)
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
writer <- NA
# loop through each search result from JSON to get necessary details like writer
imdb_id_details <- NA
for (i in 1:length(result_json$Search$imdbID)){
imdb_id = result_json$Search$imdbID[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
writer[i] <- imdb_id_details$Writer
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
output = data.frame(title, type, suppressWarnings(as.numeric(year)), writer)
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Writer"
return (output)
}
#' This function returns the plot of Movies and TV shows based on search word(s) by user.
#'
#' @param search_text search text i.e., word(s) to look for in the Title.
#' @param type expected type of the result can be - movie, series, episode, game
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, and Plot.
#' @export
#'
#' @examples
#' read_plot('Guardians')
#' read_plot('Guardians Galaxy', type = 'movie')
read_plot <- function(search_text, type = ""){
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
type = paste0("type=",type)
apikey <- "apikey=a79b2c95"
search <- gsub(" ", "+", search_text)
# query the API using GET request, and parse the http response as JSON
search_url <- paste0(base_search_url, paste(search, type, apikey, sep = '&'))
result <- httr::GET(url = search_url)
result_httr <- httr::content(result, as = "text")
result_json <- jsonlite::fromJSON(result_httr)
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
plot <- NA
# loop through each search result from JSON to get necessary details like plot
imdb_id_details <- NA
for (i in 1:length(result_json$Search$imdbID)){
imdb_id = result_json$Search$imdbID[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
plot[i] <- imdb_id_details$Plot
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
output = data.frame(title, type, suppressWarnings(as.numeric(year)), plot)
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Plot"
return (output)
}
#' This function returns the attributes of Movies and TV shows based on search word(s) by user.
#'
#' @param search_text search text i.e., word(s) to look for in the Title.
#' @param type expected type of the result can be - movie, series, episode, game
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, Genre, Runtime (in minutes), Actors, Director, Awards, and IMDB Rating.
#' @export
#'
#' @examples
#' search('Guardians')
#' search('Guardians Galaxy', type = 'movie')
search <- function(search_text, type = ""){
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
type = paste0("type=",type)
apikey <- "apikey=a79b2c95"
search <- gsub(" ", "+", search_text)
# query the API using GET request, and parse the http response as JSON
search_url <- paste0(base_search_url, paste(search, type, apikey, sep = '&'))
result <- httr::GET(url = search_url)
result_httr <- httr::content(result, as = "text")
result_json <- jsonlite::fromJSON(result_httr)
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
genre <- NA
runtime <- NA
actors <- NA
director <- NA
awards <- NA
rating <- NA
# loop through each search result from JSON to get attributes like rating, runtime and awards
imdb_id_details <- NA
for (i in 1:length(result_json$Search$imdbID)){
imdb_id = result_json$Search$imdbID[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
genre[i] <- imdb_id_details$Genre
runtime[i] <- imdb_id_details$Runtime
actors[i] <- imdb_id_details$Actors
director[i] <- imdb_id_details$Director
awards[i] <- imdb_id_details$Awards
rating[i] <- imdb_id_details$imdbRating
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), genre, runtimes, actors, director, awards, suppressWarnings(as.numeric(rating)))
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Genre"
names(output)[5] <- "Runtime (in minutes)"
names(output)[6] <- "Actors"
names(output)[7] <- "Director"
names(output)[8] <- "Awards"
names(output)[9] <- "IMDB Rating"
return (output)
}
#' This function provides surprise recommendations of movies and TV shows to the user.
#'
#' @param genre Genre of recommendations can be - action, adventure, comedy, drama, scifi, horror, animation
#'     When there is no input genre from user, a random recommendation from each of the genres is given.
#'
#' @return A dataframe that contains the list of search results.
#'     Dataframe contains Title, Type, Year, Genre, Runtime (in minutes), Actors, Director, Awards, and IMDB Rating.
#' @export
#'
#' @examples
#' surprise_me()
#' surprise_me(genre = 'adventure')
surprise_me <- function(genre = 'all'){
# Top 10 most popular IMDB titles by genre
action <- c('tt9140560', 'tt2560140', 'tt8179402', 'tt2306299', 'tt2531336', 'tt10332588', 'tt7221388', 'tt8111088', 'tt0944947', 'tt6156584')
adventure <- c('tt2560140', 'tt8179402', 'tt2306299', 'tt10332588', 'tt8111088', 'tt0944947', 'tt9845564', 'tt1831804', 'tt2948372', 'tt0293429')
comedy <- c('tt9140560', 'tt4477976', 'tt10332588', 'tt7221388', 'tt9140342', 'tt8690918', 'tt0386676', 'tt3526078', 'tt2948372', 'tt1586680')
drama <- c('tt9140560', 'tt3661210', 'tt10016180', 'tt2560140', 'tt8740790', 'tt9012876', 'tt8179402', 'tt6857376', 'tt3230854', 'tt2306299')
scifi <- c('tt9140560', 'tt3230854', 'tt8111088', 'tt6156584', 'tt5034838', 'tt8690918', 'tt1831804', 'tt10333426', 'tt6723592', 'tt1190634')
horror <- c('tt2560140', 'tt1831804', 'tt1520211', 'tt0460681', 'tt4574334', 'tt12664876', 'tt1844624', 'tt1405406', 'tt7557108', 'tt8068860')
animation <- c('tt2560140', 'tt2948372', 'tt0458290', 'tt0096697', 'tt5363918', 'tt5109280', 'tt2861424', 'tt0182576', 'tt9335498', 'tt0121955')
# get 5 random recommendations from most popular top10 based on user input of genre
# if no user input, a random recommendation from each of the genres is given
recommendations <- NA
if (genre == 'action') {
recommendations <- sample(action, 5)
} else if (genre == 'adventure') {
recommendations <- sample(adventure, 5)
} else if ( genre == 'comedy') {
recommendations <- sample(comedy, 5)
} else if ( genre == 'drama') {
recommendations <- sample(drama, 5)
} else if ( genre == 'scifi') {
recommendations <- sample(scifi, 5)
} else if ( genre == 'horror') {
recommendations <- sample(horror, 5)
} else if ( genre == 'animation'){
recommendations <- sample(animation, 5)
} else {
recommendations <- recommendations <- c(sample(action[1:5], 1), sample(adventure[1:5], 1), sample(comedy[1:5], 1), sample(drama[1:5], 1), sample(scifi[1:5], 1), sample(horror[1:5], 1), sample(animation[1:5], 1))
}
# setup URL and API parameters
base_search_url <- "http://www.omdbapi.com/?s="
id_search_url <- "http://www.omdbapi.com/?i="
apikey <- "apikey=a79b2c95"
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
genre <- NA
runtime <- NA
actors <- NA
director <- NA
awards <- NA
rating <- NA
# loop through each recommendation to get attributes like rating, runtime and awards
imdb_id_details <- NA
for (i in 1:length(recommendations)){
imdb_id = recommendations[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
genre[i] <- imdb_id_details$Genre
runtime[i] <- imdb_id_details$Runtime
actors[i] <- imdb_id_details$Actors
director[i] <- imdb_id_details$Director
awards[i] <- imdb_id_details$Awards
rating[i] <- imdb_id_details$imdbRating
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), genre, runtimes, actors, director, awards, suppressWarnings(as.numeric(rating)))
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Genre"
names(output)[5] <- "Runtime (in minutes)"
names(output)[6] <- "Actors"
names(output)[7] <- "Director"
names(output)[8] <- "Awards"
names(output)[9] <- "IMDB Rating"
return (output)
}
devtools::document()
rm(list = c("get_actors", "get_awards", "get_director", "get_genre", "get_poster", "get_rating", "get_runtime", "get_top10_recommendations", "get_writer", "read_plot", "search", "surprise_me"))
devtools::document()
library(testthat)
library(R.vengers)
test_check("R.vengers")
getwd()
setwd("C:/MDS/DATA534/Project/R-vengers/R.vengers/tests")
getwd()
library(testthat)
library(R.vengers)
test_check("R.vengers")
library(testthat)
library(R.vengers)
test_check("R.vengers")
library(testthat)
library(R.vengers)
test_check("R.vengers")
devtools::document()
rm(list = c("imdb_search"))
devtools::document()
library(testthat)
library(R.vengers)
test_check("R.vengers")
getwd()
setwd("C:/MDS/DATA534/Project/R-vengers/R.vengers")
usethis::use_github_action_check_standard()
usethis::use_readme_rmd()
rm(list = ls())
library(testthat)
library(R.vengers)
test_check("R.vengers")
getwd()
setwd("C:/MDS/DATA534/Project/R-vengers/R.vengers")
library(testthat)
library(R.vengers)
test_check("R.vengers")
setwd("C:/MDS/DATA534/Project/R.vengers/tests")
library(testthat)
library(R.vengers)
test_check("R.vengers")
