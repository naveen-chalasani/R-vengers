library(tree)
salaryt <- tree(salary~., data=Salaries)
plot(salaryt)
text(salaryt, pretty=0)
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(cv.salaryt, newdata = ja_entry)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(salaryt, newdata = ja_entry)
pred_sal
p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal678 <- predict(p.salaryt, newdata = ja_entry)
pred_sal678
p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
p.salaryt <- prune.tree(salaryt, best=8)
plot(p.salaryt)
text(p.salaryt, pretty=0)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
p.salaryt <- prune.tree(salaryt, best=8)
rank <- c("AsstProf")
discipline <- c("B")
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- c('Male')
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
plot(salaryt2)
text(salaryt2, pretty=0)
p.salaryt2 <- prune.tree(salaryt2, k = 20)
pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
pred_sal2
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
plot(salaryt2)
text(salaryt2, pretty=0)
cv.salaryt2 <- cv.tree(salaryt2, K = 20)
plot(cv.salaryt2, type = "b")
p.salaryt2 <- prune.tree(salaryt2, k = 20)
pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
pred_sal2
yhat <- predict(p.salaryt2, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
yhat <- predict(salaryt, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
yhat <- predict(p.salaryt2, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
set.seed(2222)
varboot <- bootstrap(x, nboot = 1000, theta = var, func = var)
set.seed(1111)
x <- runif(30, 0, 1)
mean(x)
var(x)
library(bootstrap)
jfit <- jackknife(x, var)
jfit$jack.bias
jfit$jack.se
set.seed(2222)
varboot <- bootstrap(x, nboot = 1000, theta = var, func = var)
mean(varboot$thetastar) - var(x)
varboot$jack.boot.se
quantile(varboot$thetastar, 0.025)
quantile(varboot$thetastar, 0.975)
n = 30
lowb <- (n-1)*var(x)/qchisq(0.975, n-1)
uppb <- (n-1)*var(x)/qchisq(0.025, n-1)
impro_CI <- cbind(lowb, uppb)
impro_CI
true_var <- 1/12
true_var
set.seed(3333)
norm_var_ci <- boot_var_ci <- matrix(NA, nrow=1000, ncol=2)
for(i in 1:1000){
dumx <- runif(30)
norm_var_ci[i, 1] <- (30-1)*var(dumx)/qchisq(0.975, 30-1)
norm_var_ci[i, 2] <- (30-1)*var(dumx)/qchisq(0.025, 30-1)
dumboot <- bootstrap(dumx, 1000, var)
boot_var_ci[i, 1] <- quantile(dumboot$thetastar, 0.025)
boot_var_ci[i, 2] <- quantile(dumboot$thetastar, 0.975)
}
contain_var_norm <- contain_var_boot <- rep(NA, 1000)
for(i in 1:1000){
contain_var_norm[i] <- norm_var_ci[i, 1] <= 1/12 & 1/12 <= norm_var_ci[i, 2]
contain_var_boot[i] <- boot_var_ci[i, 1] <= 1/12 & 1/12 <= boot_var_ci[i, 2]
}
sum(contain_var_norm)
sum(contain_var_boot)
a -> runif(30)
a -> runif(30)
a <- runif(30)
b <- rnorm(30)
plot(a)
a <- runif(30)
b <- rnorm(30)
hist(a)
a <- runif(300)
b <- rnorm(300)
hist(a)
a <- runif(3000)
b <- rnorm(3000)
hist(a)
a <- runif(3000)
b <- rnorm(3000)
hist(a,b)
a <- runif(3000)
b <- rnorm(3000)
hist(a)
a <- runif(3000)
b <- rnorm(3000)
hist(a)
hist(b)
a <- runif(3000)
b <- rnorm(3000)
hist(a)
hist(b)
quantile(a, 0.025)
quantile(a, 0.975)
a <- runif(3000)
b <- rnorm(3000)
hist(a)
hist(b)
quantile(b, 0.025)
quantile(b, 0.975)
Salaries <- read.csv('salaries.csv', stringsAsFactors=TRUE)
head(Salaries)
library(tree)
salaryt <- tree(salary~., data=Salaries)
plot(salaryt)
text(salaryt, pretty=0)
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
#p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
set.seed(763)
trainindex <- sample(1:nrow(Salaries), 200)
proftrain <- Salaries[trainindex, ]
proftest <- Salaries[-trainindex, ]
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
plot(salaryt2)
text(salaryt2, pretty=0)
cv.salaryt2 <- cv.tree(salaryt2, K = 20)
plot(cv.salaryt2, type = "b")
p.salaryt2 <- prune.tree(salaryt2, k = 20)
pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
pred_sal2
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
plot(salaryt2)
text(salaryt2, pretty=0)
cv.salaryt2 <- cv.tree(salaryt2, K = 20)
plot(cv.salaryt2, type = "b")
p.salaryt2 <- prune.tree(salaryt2, k = 20)
pred_sal2 <- predict(salaryt2, newdata = ja_entry)
pred_sal2
yhat <- predict(p.salaryt2, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
yhat <- predict(p.salaryt2, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
Salaries <- read.csv('salaries.csv', stringsAsFactors=TRUE)
head(Salaries)
library(tree)
salaryt <- tree(salary~., data=Salaries)
plot(salaryt)
text(salaryt, pretty=0)
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
#p.salaryt <- prune.tree(salaryt, best=8)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.salaryt, newdata = ja_entry)
pred_sal
set.seed(763)
trainindex <- sample(1:nrow(Salaries), 200)
proftrain <- Salaries[trainindex, ]
proftest <- Salaries[-trainindex, ]
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
plot(salaryt2)
text(salaryt2, pretty=0)
cv.salaryt2 <- cv.tree(salaryt2, K = 20)
plot(cv.salaryt2, type = "b")
p.salaryt2 <- prune.tree(salaryt2, k = 20)
pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
pred_sal2
yhat <- predict(p.salaryt2, newdata = proftest)
sal_test <- Salaries[-trainindex, 'salary']
mean((yhat - sal_test)^2)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(salaryt, newdata = ja_entry)
pred_sal
exp(5.107)
set.seed(5141)
x <- rnorm(25, 0, 10)
xbarfull <- mean(x)
xbarjack <- NA
for(i in 1:25) xbarjack[i] <- mean(x[-i])
sqrt((25-1)/(25)*sum((xbarjack-mean(xbarjack))^2))
set.seed(5141)
x <- rnorm(25, 0, 10)
xbarfull <- mean(x)
xbarjack <- NA
for(i in 1:25) xbarjack[i] <- mean(x[-i])
xbarjack
sqrt((25-1)/(25)*sum((xbarjack-mean(xbarjack))^2))
set.seed(5141)
x <- rnorm(25, 0, 10)
xbarfull <- mean(x)
xbarjack <- NA
for(i in 1:25) xbarjack[i] <- mean(x[-i])
xbarjack-mean(xbarjack)
sqrt((25-1)/(25)*sum((xbarjack-mean(xbarjack))^2))
set.seed(5141)
x <- rnorm(25, 0, 10)
xbarfull <- mean(x)
xbarjack <- NA
for(i in 1:25) xbarjack[i] <- mean(x[-i])
mean(xbarjack)
sqrt((25-1)/(25)*sum((xbarjack-mean(xbarjack))^2))
?deviance
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
cv.salaryt
?cv.tree
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
biggerdat <- rbind(Salaries, data.frame(rank="AsstProf", discipline="B", yrs.since.phd=8, yrs.service=5, sex="Male", salary=NA))
predict(salaryt, newdata=biggerdat[nrow(biggerdat),])
#salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
salaryt2 <- tree(salary~., data = proftrain)
cv.salaryt2 <- cv.tree(salaryt2, K = nrow(Salaries))
plot(cv.salaryt2, type = "b")
plot(salaryt2)
text(salaryt2, pretty=0)
predict(salaryt2, newdata=biggerdat[nrow(biggerdat),])
#p.salaryt2 <- prune.tree(salaryt2, k = 20)
#pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
#pred_sal2
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
mean((predict(salaryt)-unlist(Salaries['salary']))^2)
min(cv.salaryt$dev)/nrow(Salaries)
set.seed(6421)
cv.salaryt <- cv.tree(salaryt, K = 20)
plot(cv.salaryt, type = "b")
#mean((predict(salaryt)-unlist(Salaries['salary']))^2)
min(cv.salaryt$dev)/nrow(Salaries)
library(bootstrap)
jfit <- jackknife(x, var)
jfit$jack.bias
jfit$jack.se
set.seed(1111)
x <- runif(30, 0, 1)
mean(x)
var(x)
library(bootstrap)
jfit <- jackknife(x, var)
jfit$jack.bias
jfit$jack.se
set.seed(2222)
varboot <- bootstrap(x, nboot = 1000, theta = var, func = var)
mean(varboot$thetastar) - var(x)
varboot$jack.boot.se
set.seed(2222)
varboot <- bootstrap(x, nboot = 1000, theta = var, func = var)
mean(varboot$thetastar) - var(x)
#varboot$jack.boot.se
sd(varboot$thetastar)
p.rtree <- prune.tree(salaryt, best=8)
plot(p.rtree)
text(p.rtree, pretty=0)
rank <- factor(c("AsstProf"))
discipline <- factor(c("B"))
yrs.since.phd <- c(8)
yrs.service <- c(5)
sex <- factor(c('Male'))
ja_entry <- data.frame(rank, discipline, yrs.since.phd, yrs.service, sex)
pred_sal <- predict(p.rtree, newdata = ja_entry)
pred_sal
biggerdat <- rbind(Salaries, data.frame(rank="AsstProf", discipline="B", yrs.since.phd=8, yrs.service=5, sex="Male", salary=NA))
predict(salaryt, newdata=ja_entry)
#predict(salaryt, newdata=biggerdat[nrow(biggerdat),])
biggerdat <- rbind(Salaries, data.frame(rank="AsstProf", discipline="B", yrs.since.phd=8, yrs.service=5, sex="Male", salary=NA))
predict(p.rtree, newdata=ja_entry)
#predict(salaryt, newdata=biggerdat[nrow(biggerdat),])
biggerdat <- rbind(Salaries, data.frame(rank="AsstProf", discipline="B", yrs.since.phd=8, yrs.service=5, sex="Male", salary=NA))
predict(p.rtree, newdata=biggerdat[nrow(biggerdat),])
salaryt2 <- tree(salary~., data = Salaries, subset = trainindex)
#salaryt2 <- tree(salary~., data = proftrain)
cv.salaryt2 <- cv.tree(salaryt2, K = nrow(Salaries))
plot(cv.salaryt2, type = "b")
plot(salaryt2)
text(salaryt2, pretty=0)
predict(salaryt2, newdata=biggerdat[nrow(biggerdat),])
#p.salaryt2 <- prune.tree(salaryt2, k = 20)
#pred_sal2 <- predict(p.salaryt2, newdata = ja_entry)
#pred_sal2
install.packages('Hmisc')
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
sample(1:7, 1, prob=c(0, 0, 0, 1, 1, 1, 0)/3)
knitr::opts_chunk$set(echo = TRUE)
summary.strata <- function(y=NULL, strata=NULL, labels=NULL) {
## y is a numerical vector
## strata is vector containing strata allocations
## label is vector of the strata names
Nh = table(strata)
Wh = Nh/length(strata)
temp = aggregate(y, by=list(strata), FUN=function(z) { c(mean(z), var(z))   })
temp = as.matrix(temp)[,-1]
temp = as.data.frame(temp)
temp[,3] = Wh
if (is.null(labels)) temp[,4] = 1:length(Wh)
else temp[,4] = labels
names(temp) = c("Average", "Variance", "Weight", "Strata")
temp = temp[,c(4,3,1,2)]
return(temp)
}
install.packages('GGally')
#' This function provides the list of all the Avengers movies to the user.
#'
#' @return A dataframe that contains information of all the Avengers movies.
#'     Dataframe contains Title, Type, Year, Genre, Runtime (in minutes), Actors, Director, Awards, and IMDB Rating.
#' @export
#'
#' @examples
#' avengers_movies()
avengers_movies <- function(){
avengers_list <- c('tt0371746', 'tt0800080', 'tt1228705', 'tt0800369', 'tt0458339', 'tt0848228', 'tt1300854', 'tt1981115', 'tt1843866', 'tt2015381', 'tt2395427', 'tt0478970', 'tt3498820', 'tt1211837', 'tt3896198', 'tt2250912', 'tt3501632', 'tt1825683', 'tt4154756', 'tt5095030', 'tt4154664', 'tt4154796')
# setup URL and API parameters
id_search_url <- "http://www.omdbapi.com/?i="
apikey <- "apikey=a79b2c95"
# setup vectors for output dataframe
title <- NA
type <- NA
year <- NA
genre <- NA
runtime <- NA
actors <- NA
director <- NA
awards <- NA
rating <- NA
# loop through each recommendation to get attributes like rating, runtime and awards
imdb_id_details <- NA
for (i in 1:length(avengers_list)){
imdb_id = avengers_list[i]
id_url <- paste0(id_search_url, paste(imdb_id, apikey, sep = '&'))
movie <- httr::GET(url = id_url)
movie_httr <- httr::content(movie, as = "text")
movie_json <- jsonlite::fromJSON(movie_httr)
if (movie_json$Response == 'True'){
imdb_id_details <- movie_json
title[i] <- imdb_id_details$Title
type[i] <- imdb_id_details$Type
year[i] <- imdb_id_details$Year
genre[i] <- imdb_id_details$Genre
runtime[i] <- imdb_id_details$Runtime
actors[i] <- imdb_id_details$Actors
director[i] <- imdb_id_details$Director
awards[i] <- imdb_id_details$Awards
rating[i] <- imdb_id_details$imdbRating
} else {
print(movie_json$Error)
}
}
# create output dataframe with necessary columns from search results
output <- NA
runtimes <- NA
try(runtimes <- suppressWarnings(as.numeric(sapply(strsplit(runtime, " "), "[[", 1))), silent = TRUE)
output = data.frame(title, type, suppressWarnings(as.numeric(year)), genre, runtimes, actors, director, awards, suppressWarnings(as.numeric(rating)))
names(output)[1] <- "Title"
names(output)[2] <- "Type"
names(output)[3] <- "Year"
names(output)[4] <- "Genre"
names(output)[5] <- "Runtime (in minutes)"
names(output)[6] <- "Actors"
names(output)[7] <- "Director"
names(output)[8] <- "Awards"
names(output)[9] <- "IMDB Rating"
return (output)
}
usethis::use_github_action("test-coverage")
setwd('C:/MDS/DATA534/Project/R.vengers')
getwd()
usethis::use_github_action("test-coverage")
usethis::use_coverage()
package_coverage()
covr::package_coverage()
usethis::use_coverage()
usethis::use_coverage()
usethis::use_coverage()
usethis::use_coverage()
usethis::use_coverage()
<!-- badges: start -->
usethis::use_coverage()
<!-- badges: end -->
usethis::use_coverage()
usethis::use_github_actions_badge()
usethis
usethis::use_github_actions_badge(name = "test-coverage")
usethis::use_github_actions_badge(name = "test-coverage", repo_spec = NULL)
getwd()
usethis::use_github_actions_badge(name = "test-coverage", repo_spec = NULL)
usethis::use_coverage()
?usethis::use_github_action_check_standard()
getwd()
devtools::install_github('naveen-chalasani/R.vengers', build_vignettes = TRUE)
vignette("Introduction", package = "R.vengers")
